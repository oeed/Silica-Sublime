comment: 'Silica Syntax: Version 1.0.'
fileTypes: [slua]
foldingStartMarker: ^\s*\b(function|local\s+function|if|elseif|for)\b|{[ \t]*$|\[\[
foldingStopMarker: \bend\b|^\s*}|\]\]
keyEquivalent: ^~L
name: Silica
uuid: c8c30617-67f4-419b-8415-b9bc2d999805
scopeName: source.silica

patterns:
- include: '#property'
- include: '#class-function'
- include: '#standard'

repository:
  # Standard includes
  standard:
    patterns:
    - include: '#function'
    - include: '#constant'
    - include: '#literal'
    - include: '#comment'
    - include: '#keyword'
    - include: '#operator'
    - include: '#system'
    - include: '#special'
    - include: '#class'

  valuetype:
    patterns:
    - include: '#valuetype-with-default'
    - include: '#valuetype-no-default'

  valuetype-with-default:
    name: meta.type.silica
    begin: \b([A-Z]\w*)\b\s*?(\()
    end: (\))(\.(?:allowsNil|link))?
    beginCaptures:
      '1': {name: support.type.silica}
      '2': {name: punctuation.definition.parameters.begin.silica}
    endCaptures:
      '1': {name: punctuation.definition.parameters.end.silica}
      '2': {name: keyword.other.silica}
    patterns:
    - include: '#valuetype-parameters'

  valuetype-no-default:
    name: meta.type.silica
    match: \b([A-Z]\w*)\b\s*?(\.(?:allowsNil|link))?
    captures:
      '1': {name: support.type.silica}
      '2': {name: keyword.other.silica}
    patterns:
    - include: '#valuetype-parameters'

  valuetype-parameters:
    name: variable.parameter.function.silica
    patterns:
    - include: '#literal'
    - include: '#system'
    - include: '#keyword'
    - include: '#operator'

  # Properties table area and class/interface declaration
  property:
    begin: ^(?:(class)\s+([A-Z]\w*)(?:\s+(extends)\s+([A-Z]\w*)|\s+(implements)\s+(I[A-Z]\w*))*|(interface)\s+(I[A-Z]\w*))\s*\{
    beginCaptures:
      '1': {name: keyword.declaration.silica}
      '2': {name: support.class.silica}
      '3': {name: keyword.declaration.silica}
      '4': {name: support.class.silica}
      '5': {name: keyword.declaration.silica}
      '6': {name: support.class.silica}
      '7': {name: keyword.declaration.silica}
      '8': {name: support.class.silica}
    end: ^\}\s*$
    patterns:
    - include: '#constant'
    - include: '#valuetype'
    - include: '#standard'
    - include: '#property-enum'
    - include: '#property-declaration'

  # Property declaration key
  property-declaration:
    name: meta.type.property.silica
    captures:
      '1': {name: entity.other.attribute-name} #entity.name.property.silica}
    match: \b(\w+)\b\s*=

  # Enum declaration (i.e. phases = Enum( Number, {} ))
  property-enum:
    captures:
      '1': {name: support.type.enum.silica}
      '2': {name: support.type.enum.silica}
    match: (\b[a-z]\w*s\b)\s*=\s*(\bEnum\b)\s*\(
    name: meta.type.enum.silica

  # Properties table area and class/interface declaration
  class-function:
    begin: ^(function)\s+([A-Z]\w*)(?:\.(static))?(?:(:\w+)|(\.\w+)(:(?:get|set|action)))(\()
    beginCaptures:
      '1': {name: keyword.control.silica}
      '2': {name: support.class.silica}
      '3': {name: variable.language.super.silica}
      # '1': {name: entity.name.function.silica}
      # '2': {name: entity.name.function.silica}
      # '3': {name: entity.name.function.silica}
      '4': {name: entity.name.function.silica}
      '5': {name: entity.name.function.silica}
      # '5': {name: entity.other.attribute-name}
      # '6': {name: entity.name.function.silica}
      '6': {name: keyword.other.silica}
      '7': {name: punctuation.definition.parameters.begin.silica}
    end: (\))\n
    endCaptures:
      '1': {name: punctuation.definition.parameters.end.silica}
    patterns:
    - include: '#constant'
    - include: '#valuetype'
    - include: '#standard'
    - include: '#property-enum'
    - include: '#property-declaration'

  # Constants/Enums (i.e. Event.phases.BEFORE or IS_CAPITALISED)
  constant:
    match: ((?:\b[a-z]\w*s\b\.)?(?:\b[A-Z][A-Z_]*[A-Z]\b))
    name: constant.language.silica

  # Class name references (that aren't ValueTypes)
  class:
    match: \b([A-Z]\w*)\b
    name: support.class.silica

# Literals
  literal:
    patterns:
    - include: '#number'
    - include: '#string'

  # Numbers
  number:
    match: (?<![\d.])\s0x[a-fA-F\d]+|\b\d+(\.\d+)?([eE]-?\d+)?|\.\d+([eE]-?\d+)?
    name: constant.numeric.silica
  
## Strings
  string:
    patterns:
    - include: '#string-single-quote'
    - include: '#string-double-quote'
    - include: '#string-multi-line'

  # Single-quote string
  string-single-quote:
    name: string.quoted.single.silica
    begin: \'
    end: \'
    patterns:
    - {match: \\., name: constant.character.escape.silica}

  # Double-quote string
  string-double-quote:
    name: string.quoted.double.silica
    begin: \"
    end: \"
    patterns:
    - {match: \\., name: constant.character.escape.silica}

  # Multi-line string
  string-multi-line:
    name: string.quoted.other.multiline.silica
    begin: (?<!--)\[(=*)\[
    end: \]\1\]

# Comments
  comment:
    patterns:
    - include: '#comment-single-line'
    - include: '#comment-multi-line'

  # Single-line comment
  comment-single-line:
    match: (?:--)(?!\[\[).*$\n?
    name: comment.line.double-dash.silica

  # Multi-line comment
  comment-multi-line:
    begin: --\[(=*)\[
    end: \]\1\]
    name: comment.block.silica

# Keywords
  keyword:
    match: \b(break|do|else|for|if|elseif|return|then|repeat|while|until|end|function|local|in|try|catch)\b
    name: keyword.control.silica

# Operators
  operator:
    patterns:
    - include: '#word-operator'
    - include: '#symbol-operator'

  # Word operators
  word-operator:
    match: \b(and|or|not)\b
    name: keyword.operator.silica

  # Symbol operators
  symbol-operator:
    match: \+|-|%|#|\*|\/|\^|==?|~=|<=?|>=?|(?<!\.)\.{2}(?!\.)
    name: keyword.operator.silica

# Functions (non-class functions, that is)
  
  function:
    patterns:
    - include: '#function-standard'
    - include: '#function-assigned'

  # Standard function declaration
  function-standard:
    name: meta.function.computercraft
    captures:
      '1': {name: keyword.control.computercraft}
      '2': {name: entity.name.function.scope.computercraft}
      '3': {name: entity.name.function.computercraft}
      '4': {name: punctuation.definition.parameters.begin.computercraft}
      '5': {name: variable.parameter.function.computercraft}
      '6': {name: punctuation.definition.parameters.end.computercraft}
    match: \b(function)\s+([a-zA-Z_.:]+[.:])?([a-zA-Z_]\w*)\s*(\()([^)]*)(\))

  # Function assigned to a value manually
  function-assigned:
    name: meta.function.computercraft
    captures:
      '1': {name: entity.name.function.scope.computercraft}
      '2': {name: entity.name.function.computercraft}
      '3': {name: keyword.operator.computercraft}
      '4': {name: keyword.control.computercraft}
      '5': {name: punctuation.definition.parameters.begin.computercraft}
      '6': {name: variable.parameter.function.computercraft}
      '7': {name: punctuation.definition.parameters.end.computercraft}
    match: ([a-zA-Z_.:]+[.:])?([a-zA-Z_]\w*)\s*(\=)\s*(function)\s*(\()([^)]*)(\))

# System
  system:
    patterns:
    - include: '#system-constant'
    - include: '#system-function'
    - include: '#system-api'

  # System constants (not Silica constants)
  system-constant:
    match: (?<![^.]\.|:)\b(false|nil|true|_G|_VERSION|math\.(pi|huge))\b|(?<![.])\.{3}(?!\.)
    name: constant.language.silica

  # System functions (not Silica functions)
  system-function:
    match: (?<![^.]\.|:)\b(getfenv|getmetatable|ipairs|pairs|rawequal|rawget|rawset|setfenv|setmetatable|next|select|tonumber|tostring|type|unpack)\b(?=[({"''])
    name: support.function.silica

  # System API functions (not Silica API functions)
  system-api:
    match: (?<![^.]\.|:)\b(bit\.(blogic_rshift|tobits|blshift|brshift|bxor|bor|band|bnot|tonumb)|(colors|colours)\.(combine|subtract|test)|coroutine\.(create|resume|running|status|wrap|yield)|math\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?)|os\.(version|getComputerID|computerID|getComputerLabel|computerLabel|setComputerLabel|run|loadAPI|unloadAPI|pullEvent|pullEventRaw|queueEvent|clock|startTimer|sleep|time|day|setAlarm|shutdown|reboot)|shell\.(exit|dir|setDir|path|setPath|resolve|resolveProgram|aliases|setAlias|clearAlias|programs|run|getRunningProgram)|string\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table\.(foreachi|foreach|getn|concat|insert|maxn|remove|sort)vector\.new)\b(?=[({])
    name: support.function.library.silica

    # |Graphics.((?:colors|colours)\.(?:WHITE|ORANGE|MAGENTA|LIGHT_BLUE|YELLOW|LIME|PINK|CYAN|PURPLE|BLUE|BROWN|GREEN|RED|BLACK|GREY|GRAY|LIGHT_GREY|LIGHT_GRAY))

# Special variable references
  special:
    patterns:
    - include: '#special-self'
    - include: '#special-super'
    - include: '#special-static'

  # self references
  special-self:
    match: \b(self)\b
    name: variable.language.self.silica

  # super references
  special-super:
    match: \b(super)\b
    name: variable.language.super.silica

  # static references
  special-static:
    match: \b(static)\b
    name: variable.language.static.silica